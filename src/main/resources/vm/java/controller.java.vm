package ${packageName}.${businessName}.controller;

import java.util.List;
import com.ruoyi.common.utils.PageData;
import org.springframework.ui.Model;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.ruoyi.framework.aspectj.lang.annotation.Log;
import com.ruoyi.framework.aspectj.lang.enums.BusinessType;
import ${packageName}.${businessName}.service.${ClassName}Service;
import com.ruoyi.framework.web.controller.BaseController;
import com.ruoyi.framework.web.domain.AjaxResult;
#if($table.crud)
import com.ruoyi.framework.web.page.TableDataInfo;
#elseif($table.tree)
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.framework.web.domain.Ztree;
#end

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/${businessName}")
public class ${ClassName}Controller extends BaseController
{
    private String prefix = "${businessName}";

    @Autowired
    private ${ClassName}Service ${className}Service;

    @RequiresPermissions("${businessName}:view")
    @RequestMapping("/list")
    public String list()
    {
        return prefix + "/list";
    }

#if($table.tree)
    /**
     * 查询${functionName}树列表
     */
    @RequiresPermissions("${businessName}:list")
    @PostMapping("/list")
    @ResponseBody
    public List<${ClassName}> list(${ClassName} ${className})
    {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return list;
    }
#elseif($table.crud)
    /**
     * 查询${functionName}列表
     */
    @RequiresPermissions("${businessName}:list")
    @PostMapping("/selectList")
    @ResponseBody
    public TableDataInfo selectList()
    {
    	PageData pd = this.getPageData();
        startPage();
        List<PageData> list = ${className}Service.selectList(pd);
        return getDataTable(list);
    }
#end


#if($table.crud)
    /**
     * 新增${functionName}
     */
    @GetMapping("/add")
    public String add()
    {
        return prefix + "/add";
    }
#elseif($table.tree)
    /**
     * 新增${functionName}
     */
    @GetMapping(value = { "/add/{${pkColumn.javaField}}", "/add/" })
    public String add(@PathVariable(value = "${pkColumn.javaField}", required = false) Long ${pkColumn.javaField}, ModelMap mmap)
    {
        if (StringUtils.isNotNull(${pkColumn.javaField}))
        {
            mmap.put("${className}", ${className}Service.select${ClassName}ById(${pkColumn.javaField}));
        }
        return prefix + "/add";
    }
#end

    /**
     * 新增保存${functionName}
     */
    @RequiresPermissions("${businessName}:add")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping("/addSave")
    @ResponseBody
    public AjaxResult addSave()
    {
    	PageData pd = this.getPageData();
    	pd.put("record_id", this.getSysUser().getLoginName());
        return toAjax(${className}Service.addSave(pd));
    }

    /**
     * 修改${functionName}
     */
    @GetMapping("/edit/{${pkColumn.columnName}}")
    public String edit(@PathVariable("${pkColumn.columnName}") String ${pkColumn.columnName}, Model model)
    {
        PageData info = ${className}Service.selectById(${pkColumn.columnName});
        model.addAttribute("info", info);
        return prefix + "/edit";
    }

    /**
     * 修改保存${functionName}
     */
    @RequiresPermissions("${businessName}:edit")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PostMapping("/editSave")
    @ResponseBody
    public AjaxResult editSave(){
    	PageData pd = this.getPageData();
    	pd.put("record_id", this.getSysUser().getLoginName());
        return toAjax(${className}Service.editSave(pd));
    }

#if($table.crud)
    /**
     * 删除${functionName}
     */
    @RequiresPermissions("${businessName}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @PostMapping( "/remove")
    @ResponseBody
    public AjaxResult remove(String ids)
    {
        return toAjax(${className}Service.deleteByIds(ids));
    }
#elseif($table.tree)
    /**
     * 删除
     */
    @RequiresPermissions("${businessName}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @GetMapping("/remove/{${pkColumn.javaField}}")
    @ResponseBody
    public AjaxResult remove(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField})
    {
        return toAjax(${className}Service.delete${ClassName}ById(${pkColumn.javaField}));
    }
#end
#if($table.tree)

    /**
     * 选择${functionName}树
     */
#set($BusinessName=$businessName.substring(0,1).toUpperCase() + ${businessName.substring(1)})
    @GetMapping(value = { "/select${BusinessName}Tree/{${pkColumn.javaField}}", "/select${BusinessName}Tree/" })
    public String select${BusinessName}Tree(@PathVariable(value = "${pkColumn.javaField}", required = false) Long ${pkColumn.javaField}, ModelMap mmap)
    {
        if (StringUtils.isNotNull(${pkColumn.javaField}))
        {
            mmap.put("${className}", ${className}Service.select${ClassName}ById(${pkColumn.javaField}));
        }
        return prefix + "/tree";
    }

    /**
     * 加载${functionName}树列表
     */
    @GetMapping("/treeData")
    @ResponseBody
    public List<Ztree> treeData()
    {
        List<Ztree> ztrees = ${className}Service.select${ClassName}Tree();
        return ztrees;
    }
#end
}
