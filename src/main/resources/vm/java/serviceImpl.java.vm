package ${packageName}.${businessName}.service;

import java.util.List;
import com.ruoyi.common.utils.DateUtils;
import com.ruoyi.common.utils.PageData;
#if($table.tree)
import java.util.ArrayList;
import com.ruoyi.framework.web.domain.Ztree;
#end
#foreach ($column in $columns)
#if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import com.ruoyi.common.utils.DateUtils;
#break
#end
#end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ${packageName}.${businessName}.mapper.${ClassName}Mapper;
import com.ruoyi.common.utils.text.Convert;

/**
 * ${functionName}Service业务层处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}Service {
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    
    public PageData selectById(String ${pkColumn.columnName})
    {
        return ${className}Mapper.selectById(${pkColumn.columnName});
    }

    /**
     * 查询${functionName}列表
     * 
     * @return ${functionName}
     */
    
    public List<PageData> selectList(PageData pd)
    {
        return ${className}Mapper.selectList(pd);
    }

    /**
     * 新增${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    
    public int addSave(PageData pd){
#foreach ($column in $columns)
#if($column.columnName == 'record_date')
pd.put("record_date", DateUtils.getNowDate());
#end
#end
        return ${className}Mapper.addSave(pd);
    }

    /**
     * 修改${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    
    public int editSave(PageData pd)
    {
#foreach ($column in $columns)
#if($column.columnName == 'record_date')
pd.put("record_date", DateUtils.getNowDate());
#end
#end
        return ${className}Mapper.editSave(pd);
    }

    /**
     * 删除${functionName}对象
     * 
     * @param ids 需要删除的数据ID
     * @return 结果
     */
    
    public int deleteByIds(String ids)
    {
        return ${className}Mapper.deleteByIds(Convert.toStrArray(ids));
    }


#if($table.tree)

    /**
     * 查询${functionName}树列表
     * 
     * @return 所有${functionName}信息
     */
    
    public List<Ztree> select${ClassName}Tree()
    {
        List<${ClassName}> ${className}List = ${className}Mapper.select${ClassName}List(new ${ClassName}());
        List<Ztree> ztrees = new ArrayList<Ztree>();
        for (${ClassName} ${className} : ${className}List)
        {
            Ztree ztree = new Ztree();
#set($TreeCode=$treeCode.substring(0,1).toUpperCase() + ${treeCode.substring(1)})
#set($TreeParentCode=$treeParentCode.substring(0,1).toUpperCase() + ${treeParentCode.substring(1)})
#set($TreeName=$treeName.substring(0,1).toUpperCase() + ${treeName.substring(1)})
            ztree.setId(${className}.get${TreeCode}());
            ztree.setpId(${className}.get${TreeParentCode}());
            ztree.setName(${className}.get${TreeName}());
            ztree.setTitle(${className}.get${TreeName}());
            ztrees.add(ztree);
        }
        return ztrees;
    }
#end
}
